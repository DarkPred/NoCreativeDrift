plugins {
    id 'java-library'
    id 'maven-publish'
}
base {
    //Jar name
    archivesName = "${archives_name}-${project.name}-${minecraft_version}-${mod_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()

    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup("maven.modrinth")
        }
    }
    maven {
        url "https://cursemaven.com/"
        content {
            includeGroup("curse.maven")
        }
    }
    maven {
        name 'Gegy'
        url 'https://maven.gegy.dev'
    }

    maven { url 'https://aperlambda.github.io/maven' }
    maven {
        name = 'BlameJared Maven (CrT / Bookshelf)'
        url = 'https://maven.blamejared.com'
    }
    maven { url "https://maven.shedaniel.me/" }
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_author,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_author,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}


processResources {
    def expandProps = [
            "mod_version"                  : mod_version,
            "group"                        : project.group, //Else we target the task's group.
            "minecraft_version"            : minecraft_version,
            "minecraft_version_range_lower": minecraft_version_range_lower,
            "minecraft_version_range_upper": minecraft_version_range_upper,
            "fabric_version"               : fabric_api_version,
            "fabric_loader_version"        : fabric_loader_version,
            "fabric_loader_version_range"  : fabric_loader_version_range,
            "mod_name"                     : mod_name,
            "mod_author"                   : mod_author,
            "mod_id"                       : mod_id,
            "mod_license"                  : mod_license,
            "mod_description"              : mod_description,
            "neoforge_version"             : neoforge_version,
            "neoforge_loader_version_range": neoforge_loader_version_range,
            "java_version"                 : java_version
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}
