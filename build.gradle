subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    java.withSourcesJar()
    java.withJavadocJar()

    base {
        //Jar name
        archivesName = "${archives_name}-${project.name}-${minecraft_version}"
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestampe'              : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {
        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup("maven.modrinth")
            }
        }
        maven {
            url "https://cursemaven.com/"
            content {
                includeGroup("curse.maven")
            }
        }
        maven {
            name 'Gegy'
            url 'https://maven.gegy.dev'
        }

        maven { url 'https://aperlambda.github.io/maven' }
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven { url "https://maven.shedaniel.me/" }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = java_version.toInteger()
    }
    tasks.withType(Javadoc).configureEach {
        options.tags("apiNote:a:API Note:")
        options.tags("implSpec:a:Implementation Requirements:")
        options.tags("implNote:a:Implementation Note:")
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}