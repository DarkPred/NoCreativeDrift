import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id "com.modrinth.minotaur"
    id "net.darkhax.curseforgegradle"
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_mc_version
        mappingsVersion = parchment_date
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }

}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    compileOnly(annotationProcessor('com.google.auto.service:auto-service:1.1.1'))

    compileOnly "maven.modrinth:mekanism:${mekanism_version}"
    compileOnly "maven.modrinth:iron-jetpacks:${iron_jetpacks_version}"
    //localRuntime
}

javadoc {
    source project(":common").sourceSets.main.allJava
    source project.sourceSets.main.allJava
    options.addBooleanOption('-ignore-source-errors', true)
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN") ?: "no value"
    projectId = "VPrmY5T9"
    versionNumber.set("$minecraft_version-$mod_version-${project.name}")
    versionType.set("release")
    uploadFile.set(tasks.jar)
    versionName = "$mod_version for NeoForge $minecraft_version"
    gameVersions = game_versions.split(",").toList()
    loaders = ["NeoForge"]
    debugMode = true
    dependencies {
        optional.project("mekanism")
        optional.project("iron-jetpacks")
    }
    changelog.set(rootProject.file("CHANGELOG.md").text)
}
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "publishing"
    description = "Publishes jar to CurseForge"
    apiToken = System.getenv("CURSEFORGE_TOKEN") ?: "no value"
    debugMode = true
    var mainFile = upload(395069, tasks.jar)
    mainFile.addGameVersion(game_versions.split(","))
    mainFile.addModLoader("NeoForge")
    mainFile.changelog = rootProject.file("CHANGELOG.md").text
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addOptional("mekanism", "iron-jetpacks")
}

tasks.named("publish") {
    finalizedBy("modrinth", "publishCurseForge")
}