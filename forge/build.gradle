import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "com.modrinth.minotaur" version "2.+"
    id "net.darkhax.curseforgegradle" version "1.1.25"
}

version = mod_version
group = maven_group

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly project(":common")
    compileOnly(annotationProcessor('com.google.auto.service:auto-service:1.1.1'))

    compileOnly fg.deobf("curse.maven:simplyjetpacks-251792:5774756") //1.19.2-2.9.1.1
    compileOnly fg.deobf("maven.modrinth:cucumber:6.2.4")
    compileOnly fg.deobf("maven.modrinth:iron-jetpacks:${iron_jetpacks_version}")
    compileOnly fg.deobf("maven.modrinth:mekanism:${mekanism_version}")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

def properties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        loader_version: forge_loader_version_range, forge_version_range: forge_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_author: mod_author, mod_description: mod_description
]

processResources {
    from project(":common").sourceSets.main.resources
    for (final def property in properties) {
        inputs.property(property.getKey(), property.getValue())
    }

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand(properties)
    }
}

javadoc {
    source project(":common").sourceSets.main.allJava
    source project.sourceSets.main.allJava
    options.addBooleanOption('-ignore-source-errors', true)
}

jar.finalizedBy('reobfJar')

modrinth {
    token = System.getenv("MODRINTH_TOKEN") ?: "no value"
    projectId = "VPrmY5T9"
    versionNumber.set("$minecraft_version-$mod_version-${project.name}")
    versionType.set("release")
    uploadFile.set(tasks.jar)
    versionName = "$mod_version for Forge $minecraft_version"
    gameVersions = game_versions.split(",").toList()
    debugMode = true
    dependencies {
       //optional.project("simply-jetpacks-2")
        optional.project("iron-jetpacks")
        optional.project("mekanism")
    }
    changelog.set(rootProject.file("CHANGELOG.md").text)
}
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "publishing"
    description = "Publishes jar to CurseForge"
    apiToken = System.getenv("CURSEFORGE_TOKEN") ?: "no value"
    debugMode = true
    var mainFile = upload(395069, tasks.jar)
    mainFile.addGameVersion(game_versions.split(","))
    mainFile.changelog = rootProject.file("CHANGELOG.md").text
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addOptional("simply-jetpacks-2", "iron-jetpacks", "mekanism")
}

tasks.named("publish") {
    finalizedBy("modrinth", "publishCurseForge")
}
